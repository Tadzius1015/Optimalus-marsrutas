<!DOCTYPE html>
<html>
<head>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyAlp3b8_E2--5HWmSBRYLPohpZHEbUBjSM"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">
var map;
var fin;
var nodes = [];
var markers = [];
var durations = [];
var bestDuration;
var bestRoute = [];
var adresses = [];
var directionsDisplay = null;
var directionsService;
var polylinePath;

// Sukuriam google maps zemelapi
function initializeMap() {
    var opts = {
        center: new google.maps.LatLng(54.902434, 23.940171),
        zoom: 13,
        streetViewControl: false,
        mapTypeControl: false,
    };
   
    map = new google.maps.Map(document.getElementById('map-canvas'), opts);
    // Vykdoma paspaudus and zemelapi
    google.maps.event.addListener(map, 'click', function(event) {
        
        // Prideda tiksla i zemelapi
        marker = new google.maps.Marker({position: event.latLng, map: map});
        markers.push(marker);
        
        // Issisaugo lat ir lng
        nodes.push(event.latLng);
        // Padidina keliones tikslu kieki
        $('#destinations-count').html(nodes.length);
    });
}
// Gauna keliones laikus ir atstumus tarp tikslu
function getDurations(origin, destination) {
    var service = new google.maps.DistanceMatrixService();
    var d = $.Deferred();
    service.getDistanceMatrix({
        origins: origin,
        destinations: destination,
        travelMode: 'DRIVING',
    },
    function (response, status) {
        if (status != google.maps.DistanceMatrixStatus.OK) {
            d.reject(status);
        } else {
            d.resolve(response);
        }
    });
    return d.promise();
}
function findDurations() {
    getDurations(nodes, nodes)
        .done(function (response) {
            //adresses = response.originAdresses;
            var origins = response.originAddresses;
            for (var i = 0; i < origins.length; i++) {
                if (origins[i] != undefined)
                    adresses[i] = origins[i];
            }
            var nodeDistanceData;
            for (originNodeIndex in response.rows) {
                nodeDistanceData = response.rows[originNodeIndex].elements;
                durations[originNodeIndex] = [];
                for (destinationNodeIndex in nodeDistanceData) {
                    durations[originNodeIndex][destinationNodeIndex] = nodeDistanceData[destinationNodeIndex].duration.value;
                }
            }
            gg();
        })
    .fail(function (status) {
        output3.innerHTML = "Ivyko klaida gaunant informacija is google maps";
    })
}
//Apskaiciuoja pateikto marsruto ilgi pagal eiles tvarka
function calcDistance(points) {
    var sum = 0;
    var prev = 0;
    //console.log(points);
    points.splice(0, 1);
    for (var i = 0; i < points.length; i++) {
        var d = durations[prev][points[i]];
        //console.log(points[i], d);
        prev = points[i];
        sum += d;
    }
    //console.log(sum);
    return sum;
}
//Randa trumpiausia is sugeneruotu marsrutu    
function findShortest(perm) {
    bestDuration = Infinity;
    var d;
    for (var i = 0; i < perm.length; i++) {
        d = calcDistance(perm[i]);
        if (d < bestDuration) {
            bestDuration = d;
            bestRoute = perm[i];
        }
    }
}

function printRoute() {
    outputDiv.innerHTML += adresses[0] + '<br>';
    for (var i = 0; i < bestRoute.length; i++) {
        outputDiv.innerHTML += adresses[bestRoute[i]] + '<br>';
    }
}
//Ekrane isspausdina
function showRoute() {
    outputDiv.textContent = "";
    output2.textContent = "";
    findDurations();  
}
function gg() {
    var perm;
    var ind = Array.from(Array(nodes.length).keys());
    perm = generateCityRoutes(ind);
    t = true;
    findShortest(perm);
    printRoute();
    poly();
}
// Panaikina zymeklius ir kelius
function clearMapMarkers() {
    for (index in markers) {
        markers[index].setMap(null);
    }
    nodes = [];
    if (polylinePath != undefined) {
        polylinePath.setMap(null);
    }
    markers = [];
}
// Panaikina marsrutus, jei rodomi
function clearDirections() {
    // Jeigu rodomas marsrutas, jį panaikina
    if (directionsDisplay != null) {
        directionsDisplay.setMap(null);
        directionsDisplay = null;
    }
}
// Isvalo zemelapi
function clearMap() {
    clearMapMarkers();
    clearDirections();
    outputDiv.textContent = "";
    output2.textContent = "";
    output3.textContent = "";
    route = [];
    $('#destinations-count').html('0');
}
//Generuoja galimus aibes isdestymo variantus
function generatePermutations(Arr) {
    var permutations = [];
    var A = Arr.slice();

    function swap(a, b) {
        var tmp = A[a];
        A[a] = A[b];
        A[b] = tmp;
    }

    function generate(n, A) {
        if (n == 1) {
            permutations.push(A.slice());
        } else {
            for (var i = 0; i <= n - 1; i++) {
                generate(n - 1, A);
                swap(n % 2 === 0 ? i : 0, n - 1);
            }
        }
    }
    generate(A.length, A);
    return permutations;
}
//Generuoja visus marsrutus, kuriuos galima sudaryti is aibes
function generateCityRoutes(cities) {
    var pems = generatePermutations(cities.slice(1));
    for (var i = 0; i < pems.length; i++) {
        pems[i].unshift(cities[0]);
        pems[i].push(cities[0]);
    }
    return pems;
}
//sukuria linijas marsrutui atvaizduoti
function poly() {
    var routeCoordinates = [];
    routeCoordinates[0] = nodes[0];
    for (var i = 0; i < bestRoute.length; i++) {
        routeCoordinates = nodes[bestRoute[i]];
    }  
    directionsService = new google.maps.DirectionsService();
    directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setMap(map);
    var waypts = [];
    for (var i = 0; i < bestRoute.length-1; i++) {
        waypts.push({
            location: nodes[bestRoute[i]],
            stopover: true
        });
    }
    console.log(waypts.length);
    // Pridedamas marsrutas i zemelapi
    var request = {
        origin: nodes[0],
        destination: nodes[0],
        waypoints: waypts,
        travelMode: 'DRIVING',
    };
    directionsService.route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(response);
        }
        clearMapMarkers();
    });
}
google.maps.event.addDomListener(window, 'load', initializeMap);

</script>
</head>
<body>
<div>
  <div id="map-canvas" style="width:660px; height:560px;"></div>
  <div>
    <table>
        <tr>
            <td>Norimu aplankyti vietu skaicius: </td>
            <td id="destinations-count">0</td>
        </tr>
        <tr id="ga-buttons">
            <td colspan="2"><button onclick="showRoute()">Rasti maršrutą</button> <button class="btn" onclick="clearMap()">Išvalyti žemėlapį</button></td>
        </tr>
    </table>
  </div>
</div>
    <div id="outputDiv"></div>
    <div id="output2"> </div>
    <div id="output3"> </div>
</body>
</html>
